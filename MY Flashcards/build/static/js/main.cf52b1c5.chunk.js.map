{"version":3,"sources":["Layout/Header.js","Layout/NotFound.js","utils/api/index.js","Deck/DeckList.js","Home/HomePage.js","Deck/FormDeck.js","Deck/CreateDeck.js","Deck/ViewDeck.js","Deck/Study/StudyCardView.js","Deck/Study/StudyDeck.js","Deck/EditDeck.js","Card/FormCard.js","Card/CreateCard.js","Card/EditCard.js","Layout/index.js","App.js","index.js"],"names":["Header","className","NotFound","style","color","fontSize","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","onCancel","a","fetch","response","status","Error","statusText","json","name","console","error","stack","Promise","resolve","signal","createDeck","method","body","JSON","stringify","readDeck","deckId","updateDeck","updatedDeck","id","deleteDeck","createCard","card","Number","cardId","updateCard","updatedCard","append","DeckList","decks","setDecks","history","useNavigate","handleDelete","window","confirm","then","newDecks","filter","onClickDelete","catch","err","useEffect","listDecks","to","map","length","description","onClick","Home","useState","FormDeck","handleChange","formData","handleSubmit","onSubmit","htmlFor","type","onChange","value","placeholder","required","rows","CreateDeck","initialFormState","setFormData","e","preventDefault","target","ViewDeck","setDeck","useParams","getData","onClickCardDelete","newCards","handleCardDelete","deleteCard","front","back","StudyCardView","sideText","nextButton","initialCardState","index","frontSide","flipped","setCard","StudyDeck","EditDeck","FormCard","handleDone","CreateCard","Front","Back","EditCard","readCard","getDeck","Layout","path","element","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cf52b1c5.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Digital Flashcards</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1 style={{ color: \"red\", fontSize: 100 }}>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options, {});\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options, card);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React, {useEffect} from \"react\"\nimport {Link, useNavigate} from 'react-router-dom'\nimport {listDecks, deleteDeck} from \"../utils/api\"\n\nfunction DeckList ({decks, setDecks}) {\n    const history = useNavigate()\n\n    useEffect(()=> {\n        listDecks().then(setDecks) \n    },[setDecks])\n\n    function onClickDelete(id) {\n        const newDecks = decks.filter((deck) => deck.id !== Number(id));\n        setDecks(newDecks);\n      }\n\n      function handleDelete(id) {\n        // display confirm dialog and allow cancel\n        const doesConfirm = window.confirm(\"Are you sure you want to delete?\");\n        if (!doesConfirm) return;\n        // call the delete API function\n        deleteDeck(id)\n          .then(() => {\n            // if success, delete from state by calling onClickDelete\n            onClickDelete(id)\n            .then(history(\"/\"))\n          })\n          .catch(err => console.error(err));\n      }\n\n    return (\n        <>\n            <Link to=\"/decks/new\" \n                className=\"btn btn-secondary mb-2\">\n                <span className=\"oi oi-plus\" /> Create Deck\n            </Link>\n\n            {decks.map((deck) => (\n                <div className=\"card\" key={deck.id}>\n                    <div className=\"card-body\">\n                        <div className=\"d-flex justify-content-between\">\n                            <div>\n                                <h3>{deck.name}</h3>\n                            </div>\n                            <div>\n                                <span><h6>{deck.cards.length} cards</h6></span>\n                            </div>\n                        </div>\n                        <p>{deck.description}</p>\n                    \n                        <div className=\"d-flex justify-content-between\">\n                            <div>\n                                <Link to={`/decks/${deck.id}`} className=\"btn btn-secondary m-2\">\n                                    <span className=\"oi oi-eye\"></span> View\n                                </Link>\n                                <Link to={`/decks/${deck.id}/study`} className=\"btn btn-primary m-2\">\n                                    <span className=\"oi oi-book\"></span> study\n                                </Link>\n                            </div>\n                            <div> \n                                <button onClick={() => handleDelete(deck.id)} className=\"btn btn-danger\">\n                                <span className=\"oi oi-trash\"></span></button>   \n                            </div>\n                        </div>\n                    </div>\n                </div>\n            ))}\n        </>    \n    )\n}\n\nexport default DeckList","import React, {useState} from \"react\"\nimport DeckList from \"../Deck/DeckList\"\n\nfunction Home () {\n    const [decks, setDecks] = useState([])\n    \n    if (decks) {\n      return (\n        <>\n          <DeckList decks={decks} setDecks={setDecks} />\n        </>\n      )\n    } else {\n      return <h1> Loading... </h1>\n    }    \n}\n\nexport default Home","import React from \"react\"\nimport {Link} from \"react-router-dom\"\n\nfunction FormDeck ({ handleChange, formData, handleSubmit}) {\n    return (\n        <>\n            <nav aria-label=\"breadcrumb\">\n                <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\"><Link to=\"/\"><span className=\"oi oi-home\"/> Home</Link></li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\"> Create Deck</li>\n                </ol>\n            </nav>\n\n            <h1>Create Deck</h1>\n            \n            <form onSubmit={handleSubmit}>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"name\">Name</label>\n                    <input \n                        className=\"form-control\"\n                        type=\"text\"\n                        name=\"name\"\n                        id=\"name\" \n                        onChange={handleChange}\n                        value={formData.name}\n                        placeholder=\"Deck Name\"\n                        required={true}\n                    />\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"comment\">Description</label>\n                    <textarea \n                        className=\"form-control\"\n                        id=\"description\" \n                        name=\"description\" \n                        rows=\"4\"\n                        onChange={handleChange}\n                        value={formData.description}\n                        placeholder=\"Brief description of the deck\"\n                        required={true}\n                        >\n                    </textarea>\n                </div>\n\n                <Link to=\"/\" className=\"btn btn-secondary mb-2 mr-2\">Cancel</Link>\n                \n                <button type=\"submit\" className=\"btn btn-primary mb-2\">Submit</button>\n\n            </form>\n        </>\n    )\n}\n\nexport default FormDeck","import React, {useState} from 'react'\nimport FormDeck from \"./FormDeck\"\nimport {createDeck} from \"../utils/api\"\nimport {useNavigate} from \"react-router-dom\"\n\nfunction CreateDeck () {\n\nconst initialFormState = {\n    name: \"\",\n    description: \"\"\n}\n\nconst [formData, setFormData] = useState({initialFormState})\n\nconst history = useNavigate()\n\n\nconst handleChange = ({target}) => {\n    setFormData({\n        ...formData,\n        [target.name]: target.value\n    })\n}\n\nconst handleSubmit = async (e) => {\n    e.preventDefault()\n    const {id} = await createDeck(formData)\n    history(`/decks/${id}`)\n}\n\n    return  (\n        <FormDeck \n            handleSubmit={handleSubmit}\n            handleChange={handleChange}\n            formData={formData}\n            />\n    )\n}\n\nexport default CreateDeck","import React from \"react\"\nimport {Link, useNavigate, useParams} from  \"react-router-dom\"\nimport {useState,useEffect} from 'react'\nimport {readDeck, deleteDeck, deleteCard} from \"../utils/api\"\n\nfunction ViewDeck () {\n\n    const [deck, setDeck] = useState({})\n\n    const history = useNavigate()\n    const { deckId } = useParams();\n\n    useEffect(() => {\n        const getData = async () => {\n            const response = await readDeck(deckId);\n            setDeck(response);\n        };\n        getData();\n    }, [deckId]);\n\n\n    // handle deck deletion by triggering dialog box\n    // await deleteDeck API call then redirect to home\n    const handleDelete = async (id) => {\n        const doesConfirm = window.confirm(\"Are you sure you want to delete?\");\n        if (!doesConfirm) return;\n        await deleteDeck(id);\n        history(\"/\");\n    };\n\n    // helper function to be passed down to Card(s)\n    // in order to set deck state \"cards\" prop array\n    // as a filtered array without card to delete\n    const onClickCardDelete = async (id) => {\n        const newCards = deck.cards.filter((card) => card.id !== Number(id));\n        setDeck({\n        ...deck,\n        cards: newCards,\n        });\n    };\n\n        function handleCardDelete(id) {\n            // display confirm dialog and allow cancel\n            const doesConfirm = window.confirm(\"Are you sure you want to delete?\");\n            if (!doesConfirm) return;\n            // call the delete API function\n            deleteCard(id)\n            .then(() => {\n                // if success, delete from state by calling onClickDelete\n                onClickCardDelete(id);\n            })\n            .catch(err => console.error(err));\n        }\n\n\n\nif(deck && deck.cards) {\n    return (\n        <>\n        <nav aria-label=\"breadcrumb\">\n            <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n                <Link to=\"/\"><span className=\"oi oi-home\"/>&nbsp;Home</Link>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\"> {deck.name}</li>\n            </ol>\n        </nav>\n\n        <h3>{deck.name}</h3>\n        <p>{deck.description}</p>\n\n        <div className=\"d-flex justify-content-between\">\n            <div>\n                <Link to={`/decks/${deckId}/edit`} className=\"btn btn-secondary mb-2 mr-2\">\n                <span className=\"oi oi-pencil\" /> Edit</Link>\n                <Link to={`/decks/${deckId}/study`} className=\"btn btn-primary mb-2 mr-2\">\n                <span className=\"oi oi-book\" /> Study </Link>\n                <Link to={`/decks/${deckId}/cards/new`} className=\"btn btn-primary mb-2\">\n                <span className=\"oi oi-plus\" /> Add Cards </Link>\n            </div>\n            <div> \n                <button onClick={() => handleDelete(deck.id, history(\"/\"))} className=\"btn btn-danger\">         \n                <span className=\"oi oi-trash\"></span></button>      \n            </div>\n        </div>\n\n        <h3 className=\"mt-3\">Cards</h3>\n\n        {deck.cards.map((card) => (\n            <div className=\"card\" key={card.id}>\n                \n                <div className=\"card-body\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <p className=\"col-5\">\n                                {card.front}\n                            </p>          \n                            <p className=\"col-5\">\n                                {card.back}\n                            </p>\n                            <span className=\"col-2 justify-content-right\">\n                                <Link to={`/decks/${deckId}/cards/${card.id}/edit`} className=\"btn btn-secondary mr-2\">\n                                <span className=\"oi oi-pencil\" /> Edit</Link>\n                                <button onClick={() => handleCardDelete(card.id, history(0))} className=\"btn btn-danger\">\n                                <span className=\"oi oi-trash\"></span></button>\n                            </span>    \n                        </div>\n                    </div>   \n                </div>  \n            </div>           \n        ))}\n     \n        </>\n        )\n    } else {\n        return <p>Loading... </p>\n    }\n}\n\nexport default ViewDeck","import React, { useState, useEffect } from \"react\";\nimport { useNavigate, useParams, } from \"react-router-dom\";\nimport { readDeck } from \"../../utils/api/index\";\n\n\nfunction StudyCardView() {\n  const history = useNavigate();\n\n\n  const [deck, setDeck] = useState({});\n\n  const { deckId } = useParams();\n\n  useEffect(() => {\n    const getData = async () => {\n      const response = await readDeck(deckId);\n      setDeck(response);\n    };\n    getData();\n  }, [deckId]);\n\n  let cards;\n\n  // if deck has been set in state, reassign cards to be\n  // the cards array of the deck\n  if (deck.id) {\n    cards = deck.cards;\n  }\n\n\n\n\n\n  // set initialCardState to ensure first card shown is\n  // first card in array and displaying front side\n  const initialCardState = {\n    index: 0,\n    frontSide: true,\n    flipped: false,\n  };\n\n  // set card state to initialCardState object\n  const [card, setCard] = useState({ ...initialCardState });\n\n  // function to handle flip button by toggling\n  // frontSide and flipped props\n  const handleFlipCard = () => {\n    setCard({\n      ...card,\n      frontSide: !card.frontSide,\n      flipped: !card.flipped,\n    });\n  };\n\n  // function to handle next button\n  const handleNextCard = () => {\n    // if statement to handle moving past last card in array\n    if (card.index === cards.length - 1) {\n      const doesRestart = window.confirm(\n        \"Restart cards? Click 'cancel' to return to the home page.\"\n      );\n      // if restarting is confirmed, set card to initial state\n      if (doesRestart) {\n        setCard({ ...initialCardState });\n        // if restarting is denied, redirect to home page\n      } else {\n        history(\"/\");\n      }\n      // if card is not last card in array, ensure that\n      // display moves to next card in array and displays\n      // front side by using initialCardState\n    } else {\n      setCard({\n        ...initialCardState,\n        index: card.index + 1,\n      });\n    }\n  };\n\n  let sideText;\n\n  // setting sideText based on frontSide prop of card state\n  if (cards && cards.length > 0 && card.frontSide) {\n    sideText = cards[card.index].front;\n  } else if (cards && cards.length > 0) {\n    sideText = cards[card.index].back;\n  }\n\n  let nextButton;\n\n  // only display the next button if the card has been flipped\n  if (cards && cards.length > 0 && card.flipped) {\n    nextButton = (\n      <button onClick={handleNextCard} className=\"btn btn-primary\">\n        Next\n      </button>\n    );\n  }\n\n\n  if (cards) {\n    return (\n      <div className=\"card\">\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">\n            Card {card.index + 1} of {cards.length}\n          </h5>\n          <p className=\"card-text\">{sideText}</p>\n          <div>\n            <button onClick={handleFlipCard} className=\"btn btn-secondary mr-2\">\n              Flip\n            </button>\n            {nextButton}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return null;\n}\n\nexport default StudyCardView;","import React, { useState, useEffect } from \"react\";\nimport { readDeck } from \"../../utils/api\";\nimport { useParams, Link, useNavigate } from \"react-router-dom\";\nimport StudyCardView from \"./StudyCardView\"\n\nfunction StudyDeck() {\n  const { deckId } = useParams();\n  const [deck, setDeck] = useState({});\n  const history = useNavigate()\n\n  useEffect(() => {\n    readDeck(deckId).then(setDeck);\n  }, [deckId]);\n\n   \n    return (\n      <>\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\">\n              <Link to=\"/\">\n                <span className=\"oi oi-home\" /> Home\n              </Link>\n            </li>\n            <li className=\"breadcrumb-item\">\n              <Link to={`/decks/${deckId}`}> {deck.name}</Link>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\n              {\" \"}\n              Study\n            </li>\n          </ol>\n        </nav>\n        <h1>{deck.name}: Study</h1>\n\n\n      {(() => {\n        if (deck.cards && deck.cards.length > 2) {\n          return (\n            <StudyCardView />\n          )\n        } else {\n          return (\n            <>\n                <h3>Not enough cards.</h3>\n                <p>You need at least 3 cards to study. There are cards in this deck</p>\n            </>\n          )\n        }\n      })()}\n      <br/>\n      <button \n          type=\"button\" \n          onClick={() => history(-1)} \n          className=\"btn btn-secondary mb-2 mr-2\">Go Back\n      </button>\n      <Link to={`/decks/${deckId}/cards/new`} className=\"btn btn-primary mb-2\">\n                <span className=\"oi oi-plus\" /> Add Cards </Link>\n    </>\n  )\n        \n}\n\nexport default StudyDeck;\n\n\n","import React, {useState, useEffect} from 'react'\nimport {updateDeck, readDeck} from \"../utils/api\"\nimport {useNavigate, useParams, Link} from \"react-router-dom\"\n\nfunction EditDeck () {\n\n    const history = useNavigate()\n\n    const {deckId} = useParams()\n\n    const initialFormState = {\n        name: \"\",\n        description: \"\"\n    }\n\n    const [deck, setDeck] = useState({initialFormState})\n    \n    \n    useEffect(() => {\n        readDeck(deckId)\n        .then(setDeck)\n    }, [deckId])\n\n\n\nconst handleChange = ({target}) => {\n    setDeck({\n        ...deck,\n        [target.name]: target.value\n    })\n}\n\nconst handleSubmit = async (e) => {\n    e.preventDefault()\n    await updateDeck(deck)\n    history(-1)\n}\n\n    return  (\n        <>\n        <nav aria-label=\"breadcrumb\">\n            <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\"><Link to=\"/\"><span className=\"oi oi-home\"/> Home</Link></li>\n            <li className=\"breadcrumb-item\"><Link to={`/decks/${deckId}`}> {deck.name}</Link></li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\"> Edit Deck</li>\n            </ol>\n        </nav>\n\n        <h1>Edit Deck</h1>\n        \n        <form onSubmit={handleSubmit}>\n            <div className=\"mb-3\">\n                <label htmlFor=\"name\">Name</label>\n                <input \n                    className=\"form-control\"\n                    type=\"text\"\n                    name=\"name\"\n                    id=\"name\" \n                    onChange={handleChange}\n                    value={deck.name}\n                    placeholder=\"Deck Name\"\n                    required={true}\n                />\n            </div>\n            <div className=\"mb-3\">\n                <label htmlFor=\"comment\">Description</label>\n                <textarea \n                    className=\"form-control\"\n                    id=\"description\" \n                    name=\"description\" \n                    rows=\"4\"\n                    onChange={handleChange}\n                    value={deck.description}\n                    placeholder=\"Brief description of the deck\"\n                    required={true}\n                    >\n                </textarea>\n            </div>\n\n            <button \n                type=\"button\" \n                onClick={() => history(-1)} \n                className=\"btn btn-secondary mb-2 mr-2\">Cancel\n            </button>\n\n            <button \n                type=\"submit\" \n                className=\"btn btn-primary mb-2\">Submit\n            </button>\n\n        </form>\n    </>\n)\n}\n\nexport default EditDeck","import React, {useEffect, useState} from \"react\"\nimport {Link, useNavigate, useParams} from \"react-router-dom\"\nimport {readDeck} from \"../utils/api\"\n\nfunction FormCard ({ handleDone, formData, handleSubmit}) {\n    const history = useNavigate()\n    const {deckId} = useParams()\n   \n    const [deck, setDeck] = useState({})\n\n    useEffect(() => {\n        readDeck(deckId)\n        .then(setDeck)\n    }, [deckId])\n \n    return (\n        <>\n            <nav aria-label=\"breadcrumb\">\n                <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\"><Link to=\"/\"><span className=\"oi oi-home\"/>Home</Link></li>\n                <li className=\"breadcrumb-item\"><Link to={`/decks/${deckId}`}>{deck.name}</Link></li>\n                <li className=\"breadcrumb-item active\" aria-current=\"page\"> Add Card</li>\n                </ol>\n            </nav>\n\n            <h3>Add Card</h3>\n            \n            <form onSubmit={handleSubmit}>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"front\">Front</label>\n                    <textarea \n                        className=\"form-control\"\n                        id=\"front\" \n                        name=\"front\" \n                        rows=\"2\"\n                        onChange={handleDone}\n                        value={formData.front}\n                        placeholder=\"Front side of card\"\n                        required={true}\n                        >\n                    </textarea>\n                </div>\n                <div className=\"mb-3\">\n                    <label htmlFor=\"back\">Back</label>\n                    <textarea \n                        className=\"form-control\"\n                        id=\"back\" \n                        name=\"back\" \n                        rows=\"2\"\n                        onChange={handleDone}\n                        value={formData.back}\n                        placeholder=\"Back side of card\"\n                        required={true}\n                        >\n                    </textarea>\n                </div>\n                <button \n                    type=\"button\" \n                    onClick={() => history(-1)} \n                    className=\"btn btn-secondary mb-2 mr-2\">Done\n                </button>\n                \n                <button type=\"submit\" className=\"btn btn-primary mb-2\">Save</button>\n\n            </form>\n        </>\n    )\n}\n\nexport default FormCard","import React, {useState} from 'react'\nimport FormCard from \"./FormCard\"\nimport {createCard} from \"../utils/api\"\nimport {useParams, useNavigate} from \"react-router-dom\"\n\nfunction CreateCard () {\n\nconst history = useNavigate()\n\nconst initialFormState = {\n    Front: \"\",\n    Back: \"\"\n}\n\nconst [formData, setFormData] = useState({initialFormState})\n\nconst {deckId} = useParams()\n\n\nconst handleDone = ({target}) => {\n    setFormData({\n        ...formData,\n        [target.name]: target.value\n    })\n}\n\nconst handleSubmit = async (e) => {\n    e.preventDefault()\n    await createCard(deckId, formData)\n    setFormData({initialFormState})\n    history(-0)\n}\n\n    return  (\n        <FormCard\n            handleSubmit={handleSubmit}\n            handleDone={handleDone}\n            formData={formData}\n            />\n    )\n}\n\nexport default CreateCard","import React, {useState, useEffect} from 'react'\nimport {updateCard, readDeck, readCard} from \"../utils/api\"\nimport {useNavigate, useParams, Link} from \"react-router-dom\"\n\nfunction EditCard () {\n\n    const history = useNavigate()\n\n    const {cardId} = useParams()\n    const {deckId} = useParams()\n\n    const initialFormState = {\n        name: \"\",\n        description: \"\"\n    }\n\n    const [card, setCard] = useState({initialFormState})\n    const [deck, setDeck] = useState({});\n    \n    \n    useEffect(() => {\n        readCard(cardId)\n        .then(setCard)\n    }, [cardId])\n\n    // await deck to be returned from readDeck API call then set deck state as response\n    useEffect(() => {\n        const getDeck = async () => {\n        const response = await readDeck(deckId);\n        setDeck(response);\n        };\n        getDeck();\n    }, [deckId]);\n\n\n\nconst handleChange = ({target}) => {\n    setCard({\n        ...card,\n        [target.name]: target.value\n    })\n}\n\nconst handleSubmit = async (e) => {\n    e.preventDefault()\n    await updateCard(card)\n    history(-1)\n}\n\n    return  (\n        <>\n        <nav aria-label=\"breadcrumb\">\n            <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\"><Link to=\"/\"><span className=\"oi oi-home\"/> Home</Link></li>\n            <li className=\"breadcrumb-item\"><Link to={`/decks/${deckId}`}>{deck.name} Deck</Link></li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\"> Edit Card {cardId}</li>\n            </ol>\n        </nav>\n\n        <h1>Edit Card</h1>\n        \n        <form onSubmit={handleSubmit}>\n            <div className=\"mb-3\">\n                <label htmlFor=\"front\">Front</label>\n                <textarea\n                    className=\"form-control\"\n                    type=\"text\"\n                    name=\"front\"\n                    id=\"front\" \n                    onChange={handleChange}\n                    value={card.front}\n                    placeholder=\"Front side of card\"\n                    required={true}\n                ></textarea>\n            </div>\n            <div className=\"mb-3\">\n                <label htmlFor=\"back\">Back</label>\n                <textarea \n                    className=\"form-control\"\n                    id=\"back\" \n                    name=\"back\" \n                    onChange={handleChange}\n                    value={card.back}\n                    placeholder=\"Card Back\"\n                    required={true}\n                    >\n                </textarea>\n            </div>\n\n            <button \n                    type=\"button\" \n                    onClick={() => history(-1)} \n                    className=\"btn btn-secondary mb-2 mr-2\">Cancel\n            </button>\n\n            <button type=\"submit\" className=\"btn btn-primary mb-2\">Submit</button>\n\n        </form>\n    </>\n)\n}\n\nexport default EditCard","import React from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\n\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport Home from \"../Home/HomePage\";\nimport CreateDeck from \"../Deck/CreateDeck\";\nimport ViewDeck from \"../Deck/ViewDeck\";\nimport StudyDeck from \"../Deck/Study/StudyDeck\";\nimport EditDeck from \"../Deck/EditDeck\";\nimport CreateCard from \"../Card/CreateCard\";\nimport EditCard from \"../Card/EditCard\";\n\nfunction Layout() {\n  return (\n    <>\n      <Header />\n      <div className=\"container\">\n        {/* TODO: Implement the screen starting here */}\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/decks/new\" element={<CreateDeck />} />\n          <Route path=\"/decks/:deckId\" element={<ViewDeck />} />\n          <Route path=\"/decks/:deckId/study\" element={<StudyDeck />} />\n          <Route path=\"/decks/:deckId/cards/new\" element={<CreateCard />} />\n          <Route path=\"/decks/:deckId/edit\" element={<EditDeck />} />          \n          \n          <Route path=\"/decks/:deckId/cards/:cardId/edit\" element={<EditCard />} />\n\n\n          <Route path=\"*\" element={<NotFound />} />\n          \n        </Routes>\n      </div>\n    </>\n  );\n}\n\nexport default Layout;\n\n\n","import React from \"react\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\n function App() {\n  return (\n    <div className=\"app-routes\">\n      <Layout />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n    <Router>\n      <App />\n    </Router>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}